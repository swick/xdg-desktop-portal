name: Build and Test

on: [push, pull_request]

env:
  IMAGE_TAG: 20240404-0
  TESTS_TIMEOUT: 10 # in minutes

jobs:
  build-container:
    name: Create build container
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Check if image already exists on GHCR
        id: check
        run: |
          image=ghcr.io/${{ github.repository_owner }}/xdg-desktop-portal-build:${{ env.IMAGE_TAG }}
          echo "exists=$(docker manifest inspect $image >/dev/null && echo 'true' || echo 'false')" \
            >> "$GITHUB_OUTPUT"

      - name: Build and push
        if: ${{ steps.check.outputs.exists == 'false' }}
        uses: docker/build-push-action@v5
        with:
          push: true
          file: .github/workflows/Containerfile
          tags: ghcr.io/${{ github.repository_owner }}/xdg-desktop-portal-build:${{ env.IMAGE_TAG }}

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: build-container
    strategy:
      matrix:
        compiler: ['gcc', 'clang']
        sanitizer: ['address']

    container:
      image: ghcr.io/${{ github.repository_owner }}/xdg-desktop-portal-build:latest
      env:
        CFLAGS: -Wp,-D_FORTIFY_SOURCE=2
        CC: ${{ matrix.compiler }}
        TEST_IN_CI: 1
        G_MESSAGES_DEBUG: all
      options: --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined

    steps:
      - name: Configure environment
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          echo XDG_DATA_DIRS=$GITHUB_WORKSPACE/tests/share:/usr/local/share:/usr/share | tee -a $GITHUB_ENV

      - name: Check out xdg-desktop-portal
        uses: actions/checkout@v4

      - name: Check POTFILES.in
        run: .github/workflows/check-potfiles.sh

      - name: Build xdg-desktop-portal
        run: |
          meson setup _build $MESON_OPTIONS
          meson compile -C _build
        env:
          MESON_OPTIONS: -Dinstalled-tests=true -Dpytest=enabled -Db_sanitize=${{ matrix.sanitizer }}

      - name: Run xdg-desktop-portal tests
        run: timeout --signal=KILL -v ${TESTS_TIMEOUT}m meson test -C _build

      - name: Install xdg-desktop-portal
        run: meson install -C _build

      - name: Run xdg-desktop-portal installed-tests
        run: |
          test -n "$(gnome-desktop-testing-runner -l xdg-desktop-portal)"
          gnome-desktop-testing-runner --report-directory installed-test-logs/ \
            -t $((TESTS_TIMEOUT * 60)) xdg-desktop-portal

      - name: Create dist tarball
        run: |
          ls -la
          timeout --signal=KILL -v ${TESTS_TIMEOUT}m meson dist -C _build

      - name: Upload test logs
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test logs (${{ matrix.compiler }}, ${{ matrix.sanitizer }})
          path: |
            tests/*.log
            test-*.log
            installed-test-logs/
            _build/meson-logs/testlog.txt
